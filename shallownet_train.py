# -*- coding: utf-8 -*-
"""shallownet_train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L_247ly9KXKm8CE3N3cs-oyq7QZKj9kv
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x
import sys
sys.path.append('/content/drive/My Drive/Colab_Work/PPM/nn/conv')
from shallownet import ShallowNet
from sklearn.preprocessing import LabelBinarizer
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
sys.path.append('/content/drive/My Drive/Colab_Work/PPM/preprocessing')
from imagetoarraypreprocessor import ImageToArrayPreprocessor
sys.path.append('/content/drive/My Drive/Colab_Work/PPM/preprocessing')
from simplepreprocessor import SimplePreprocessor
sys.path.append('/content/drive/My Drive/Colab_Work/PPM/datasets')
from simpledatasetloader import SimpleDatasetLoader
from keras.optimizers import SGD
from imutils import paths
import matplotlib.pyplot as plt
import numpy as np

# Commented out IPython magic to ensure Python compatibility.
print("[INFO] loading images...")
# %cd /content/drive/My\ Drive/Colab_Work
imagePaths = list(paths.list_images('animals'))
sp = SimplePreprocessor(32, 32)
iap = ImageToArrayPreprocessor()
sdl = SimpleDatasetLoader(preprocessors=[sp, iap])
(data, labels) = sdl.load(imagePaths, verbose=500)
data = data.astype("float")/255.0

(trainX, testX, trainY, testY) = train_test_split(data, labels, test_size=0.25,  random_state=42)

trainY = LabelBinarizer().fit_transform(trainY)
testY = LabelBinarizer().fit_transform(testY)

print("[INFO] compiling model...")
opt = SGD(lr=0.005)
model = ShallowNet.build(width=32, height=32, depth=3, classes=3)
model.compile(loss="categorical_crossentropy", optimizer=opt, metrics=["accuracy"])

print("[INFO] training network...")
H = model.fit(trainX,  trainY, validation_data=(testX, testY), batch_size=32, epochs=100, verbose=1)

# Commented out IPython magic to ensure Python compatibility.
print("[INFO] serializing network...")
# %cd /content/drive/My\ Drive/Colab_Work
model.save('shallownet_weights.hdf5')

print("[INFO] evaluating network...")
predictions = model.predict(testX, batch_size=32)
print(classification_report(testY.argmax(axis=1), predictions.argmax(axis=1), target_names=["cat","dog","panda"]))

# Commented out IPython magic to ensure Python compatibility.
plt.style.use("ggplot")
plt.figure()
plt.plot(np.arange(0, 100), H.history["loss"], label="train_loss")
plt.plot(np.arange(0, 100), H.history["val_loss"], label="val_loss")
plt.plot(np.arange(0, 100), H.history["acc"], label="train_acc")
plt.plot(np.arange(0, 100), H.history["val_acc"], label="val_acc")
plt.title("Training Loss and Accuracy")
plt.xlabel("Epoch #")
plt.ylabel("Loss/Accuracy")
plt.legend()
# %cd /content/drive/My\ Drive/Colab_Work
plt.savefig('shallownet_animals_train_test_plot.png')